PRAGMA foreign_keys=0;

CREATE TABLE MEDIA_ITEM(
title VARCHAR(100) NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
pub_date DATE,
PRIMARY KEY(doi_eidr)
);

CREATE TABLE PERSON(
name VARCHAR(50) NOT NULL,
dob DATE,
library_id INTEGER NOT NULL,
PRIMARY KEY(library_id)
);

CREATE TABLE LIBRARY_PATRON(
address VARCHAR(300),
email VARCHAR(100) NOT NULL,
access_credentials BIT NOT NULL DEFAULT 0,
library_id INTEGER NOT NULL,
active BIT NOT NULL DEFAULT 1,
PRIMARY KEY(library_id),
FOREIGN KEY(library_id) REFERENCES PERSON(library_id)
);

CREATE TABLE ACTOR(
library_id INTEGER NOT NULL,
imdb_url VARCHAR(200),
PRIMARY KEY(library_id),
FOREIGN KEY(library_id) REFERENCES PERSON(library_id)
);

CREATE TABLE AUTHOR(
library_id INTEGER NOT NULL,
goodreads_url VARCHAR(200),
PRIMARY KEY(library_id),
FOREIGN KEY(library_id) REFERENCES PERSON(library_id)
);

CREATE TABLE MUSICAL_ARTIST(
library_id INTEGER NOT NULL,
spotify_url VARCHAR(200),
applemusic_url VARCHAR(200),
PRIMARY KEY(library_id),
FOREIGN KEY(library_id) REFERENCES PERSON(library_id)
);

CREATE TABLE MOVIE(
runtime TIME NOT NULL,
publisher VARCHAR(100),
genre VARCHAR(50),
rating VARCHAR(50),
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(doi_eidr),
FOREIGN KEY(doi_eidr) REFERENCES MEDIA_ITEM(doi_eidr)
);

CREATE TABLE MUSICAL_ALBUM(
runtime TIME NOT NULL,
record_label VARCHAR(100),
genre VARCHAR(50),
library_id INTEGER NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(doi_eidr),
FOREIGN KEY(doi_eidr) REFERENCES MEDIA_ITEM(doi_eidr),
FOREIGN KEY(library_id) REFERENCES MUSICAL_ARTIST(library_id)
);

CREATE TABLE AUDIOBOOK(
length TIME NOT NULL,
genre VARCHAR(50),
author_library_id INTEGER NOT NULL,
narrator_library_id INTEGER,
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(doi_eidr),
FOREIGN KEY(doi_eidr) REFERENCES MEDIA_ITEM(doi_eidr),
FOREIGN KEY(author_library_id) REFERENCES AUTHOR(library_id),
FOREIGN KEY(narrator_library_id) REFERENCES AUTHOR(library_id)
);

CREATE TABLE COPY(
inventory_number VARCHAR(50) NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
format VARCHAR(50) NOT NULL,
location VARCHAR(50),
patron_id INTEGER,
checkout_date DATE,
PRIMARY KEY(inventory_number),
FOREIGN KEY(doi_eidr) REFERENCES MEDIA_ITEM(doi_eidr),
FOREIGN KEY(patron_id) REFERENCES LIBRARY_PATRON(library_id)
);

CREATE TABLE MEDIA_ORDER(
order_number VARCHAR(50) NOT NULL,
price_per_unit FLOAT NOT NULL,
tracking_number VARCHAR(100),
carrier VARCHAR(50),
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(order_number),
FOREIGN KEY(doi_eidr) REFERENCES MEDIA_ITEM(doi_eidr)
);

CREATE TABLE CAST(
doi_eidr VARCHAR(50) NOT NULL,
library_id INTEGER NOT NULL,
role VARCHAR(100),
PRIMARY KEY(doi_eidr, library_id)
FOREIGN KEY(doi_eidr) REFERENCES MOVIE(doi_eidr),
FOREIGN KEY(library_id) REFERENCES ACTOR(library_id)
);

CREATE TABLE SONG(
name VARCHAR(100) NOT NULL,
runtime TIME NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(name, runtime, doi_eidr),
FOREIGN KEY(doi_eidr) REFERENCES MUSICAL_ALBUM(doi_eidr)
);

CREATE TABLE FEATURED_ARTIST(
name VARCHAR(100) NOT NULL,
runtime TIME NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
library_id INTEGER NOT NULL,
PRIMARY KEY(name,runtime,doi_eidr,library_id)
FOREIGN KEY(name, runtime, doi_eidr) REFERENCES SONG(name, runtime, doi_eidr)
FOREIGN KEY(library_id) REFERENCES MUSICAL_ARTIST(library_id)
);

CREATE TABLE BOOK_CHAPTER(
name VARCHAR(100),
chapter_index INT NOT NULL,
length TIME NOT NULL,
doi_eidr VARCHAR(50) NOT NULL,
PRIMARY KEY(chapter_index, doi_eidr),
FOREIGN KEY(doi_eidr) REFERENCES AUDIOBOOK(doi_eidr)
);

CREATE TABLE RETURN(
inventory_number VARCHAR(50) NOT NULL,
library_id INTEGER NOT NULL,
checkout_date DATE NOT NULL,
return_date DATE NOT NULL,
PRIMARY KEY(inventory_number,library_id,checkout_date),
FOREIGN KEY(inventory_number) REFERENCES COPY(inventory_number),
FOREIGN KEY(library_id) REFERENCES LIBRARY_PATRON(library_id)
);

CREATE VIEW PATRONS_WITH_ACCESS AS
    SELECT name,
           email,
           library_id
      FROM LIBRARY_PATRON AS LP,
           PERSON AS P
     WHERE LP.library_id = P.library_id AND 
           LP.access_credientials = 1;



CREATE VIEW AUDIOBOOK_BY_GENRE AS
    SELECT title,
           genre,
           name
      FROM (
               AUDIOBOOK AS AB
               JOIN
               MEDIA_ITEM AS MI ON AB.doi_eidr = MI.doi_eidr
           ),
           Person AS P
     WHERE author_library_id = P.library_id;

CREATE VIEW AVAILABLE_COPIES (
    Title,
    Available
)
AS
    SELECT MI.title,
           COUNT( * ) 
      FROM (
               (
                   MEDIA_ITEM AS MI
                   JOIN
                   AUDIOBOOK AS A ON MI.doi_eidr = A.doi_eidr
               )
               JOIN
               COPY AS C ON C.doi_eidr = MI.doi_eidr
           )
     WHERE C.patron_id IS NULL
     GROUP BY MI.title;
     
     CREATE VIEW SONGS_BY_GENRE AS
    SELECT name,
           genre
      FROM (
               MUSICAL_ALBUM AS MA
               JOIN
               SONG AS S ON MA.doi_eidr = S.doi_eidr
           )
     ORDER BY name ASC;


CREATE UNIQUE INDEX PERSON_ID_INDEX ON PERSON (
    library_id
);

CREATE UNIQUE INDEX MEDIA_ITEM_INDEX ON MEDIA_ITEM (
    doi_eidr
);


CREATE INDEX RETURN_INDEX_ID ON RETURN (
    library_id
);

CREATE INDEX RETURN_INDEX_DATE ON RETURN (
    inventory_number,
    checkout_date
);

CREATE INDEX COPY_TREE ON COPY (
    inventory_number,
    doi_eidr,
    location
);


